version: 2.1

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.10.2
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Initialize venv / Install deps
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ".venv"
      - run:
          name: Linting
          command: |
            . venv/bin/activate
            flake8
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            pytest

  build-sentry:
    docker:
      - image: cimg/node:19.4
    steps:
      - checkout # check out the code in the project directory
      - run:
          name: Building Sentry release
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits --auto $SENTRY_RELEASE
            sentry-cli releases finalize $SENTRY_RELEASE

  containerize-and-deploy:
    docker:
      - image: cimg/python:3.10.2
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Generating container name
          command: |
            DOCKER_NAME="$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')"
            echo "export DOCKER_NAME=${DOCKER_NAME}" >> ${BASH_ENV}
      - run:
          name: Building container
          command: |
            docker build --tag $DOCKER_LOGIN/$DOCKER_NAME \
              --build-arg DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY} \
              --build-arg SENTRY_DSN=${SENTRY_DSN} \
              --build-arg HOST_URL=${HOST_URL} \
              .
      - run:
          name: Deploying to DockerHub
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/$DOCKER_NAME
      - run:
          name: Deploying to Azure
          command: |
            echo "$AZURE_PASSWORD" | docker login $AZURE_REPO_URL --username $AZURE_USERNAME --password-stdin
            docker tag $DOCKER_LOGIN/$DOCKER_NAME $AZURE_REPO_URL/$DOCKER_NAME
            docker push $AZURE_REPO_URL/$DOCKER_NAME

workflows:
  main:
    jobs:
      - build-and-test
      - build-sentry:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main
      - containerize-and-deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main